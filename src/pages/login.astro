<!-- ---
import z from "zod";
import { prisma } from "../../lib/prisma";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

interface ErrorMessage {
    name: string | number;
    message: string;
}

let errors: ErrorMessage[] = [];
let emailInput = "";
let passwordInput = "";

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const email = formData.get("email") as string;
    const password = formData.get("password") as string;
    emailInput = email;
    passwordInput = password;
    const result = z
        .object({
        email: z.string().email(),
        password: z.string().min(8),
        })
        .safeParse({ email, password });
    if (!result.success) {
        errors = result.error.errors.map((error) => {
        return {
            name: error.path[0],
            message: error.message,
        };
        });
        Astro.response.status = 400;
    } else {
        try {
        const user = await prisma.user.findUnique({
            where: {
            name: result.data.name,
            },
        });

        if (!user) {
            errors = [{ name: "name", message: "Invalid credentials" }];
            Astro.response.status = 400;
        } else {
            const valid = bcrypt.compareSync(password, user.password);

            if (!valid) {
            errors = [{ name: "password", message: "Invalid credentials" }];
            Astro.response.status = 400;
            } else {
            const token = jwt.sign(
                {
                id: user.id,
                name: user.name,
                },
                import.meta.env.SECRET,
                { expiresIn: "1d" },
            );
            Astro.cookies.set("token", token, {
                httpOnly: true,
                secure: true,
                maxAge: 60 * 60 * 24,
            });
            return Astro.redirect("/dashboard", 302);
            }
        }
        } catch (e) {
        console.log(e);
        Astro.response.status = 500;
        }
    }
}
--- -->